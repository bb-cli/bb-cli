#!/usr/bin/env php
<?php

require_once __DIR__.'/../src/utils/helpers.php';
require_once __DIR__.'/../src/Base.php';

if (version_compare(phpversion(), '7.0.0') < 0) {
    o('Your PHP version must be equal or higher than "7.0.0" to use bb-cli', 'red');
    o('PHP version: '.phpversion(), 'yellow');
    exit(1);
}

$requiredExtensions = [
    'json',
    'curl',
    'mbstring',
];

if ($missingExtensions = array_diff($requiredExtensions, get_loaded_extensions())) {
    o('PHP extensions is incomplete. Required installing:', 'red');
    o($missingExtensions, 'yellow');
    exit(1);
}

$actionsFolder = __DIR__.'/../src/Actions';
foreach (scandir($actionsFolder) as $file) {
    if (substr($file, -4) === '.php') {
        require_once "{$actionsFolder}/{$file}";
    }
}

$actions = [
    'pr' => \BBCli\BBCli\Actions\Pr::class,
    'pipeline' => \BBCli\BBCli\Actions\Pipeline::class,
    'branch' => \BBCli\BBCli\Actions\Branch::class,
    'auth' => \BBCli\BBCli\Actions\Auth::class,
];

$staticCommands = [
    'help' => [
        'help',
        '--help',
        '-h',
    ],
    'version' => [
        'version',
        '--version',
        '-v',
    ],
];

$userBaseAction = $argv[1] ?? null;

if (in_array($userBaseAction, $staticCommands['version'])) {
    o('Version: 0.0.0', 'green');
    exit(0);
}

if (is_null($userBaseAction) || in_array($userBaseAction, $staticCommands['help'])) {
    o('Available actions:', 'green');
    o(array_keys($actions), 'green');
    exit(0);
}

if (!isset($actions[$userBaseAction])) {
    o("Given action is invalid: ({$userBaseAction})", 'red');
    exit(1);
}

$actionClass = new $actions[$userBaseAction]();
$userAction = $argv[2] ?? null;

if (in_array($userAction, $staticCommands['help'])) {
    o('Available methods:', 'green');
    foreach (array_values($actionClass::AVAILABLE_COMMANDS) as $command) {
        o(implode(",\033[0;90m", explode(',', $command)), 'yellow');
    }
    exit(0);
}

if ($actionClass::CHECK_GIT_FOLDER) {
    if (!is_dir(getcwd().'/.git')) {
        o('ERROR: No git repository found in current directory.', 'red');
        exit(1);
    }
}

$classMethodToCall = $actionClass::DEFAULT_METHOD;

if (!is_null($userAction)) {
    $classMethodToCall = $actionClass->getMethodNameFromAlias($userAction);
}

if ($classMethodToCall === false) {
    o("Unknown method ", 'red', '', "\033[0m");
    o("{$argv[2]}", 'cyan', '', "\033[0m");
    o(" for ", 'red', '', "\033[0m");
    o("{$userBaseAction}", 'cyan', '', "\033[0m");
    o(" action.", 'red');
    exit(1);
}

try {
    call_user_func_array(
        [$actionClass, $classMethodToCall],
        array_slice($argv, 3)
    );
} catch (\ArgumentCountError $e) {
    o('Too few arguments.', 'red');
    exit(1);
} catch (\Throwable $th) {
    o($th->getMessage(), 'red');
    exit(1);
}
